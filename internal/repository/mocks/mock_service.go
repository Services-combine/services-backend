// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/b0shka/services/internal/domain"
	auth "github.com/b0shka/services/internal/domain/auth"
	settings "github.com/b0shka/services/internal/domain/settings"
	user "github.com/b0shka/services/internal/domain/user"
	repository "github.com/b0shka/services/internal/repository"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// MockUsers is a mock of Users interface.
type MockUsers struct {
	ctrl     *gomock.Controller
	recorder *MockUsersMockRecorder
}

// MockUsersMockRecorder is the mock recorder for MockUsers.
type MockUsersMockRecorder struct {
	mock *MockUsers
}

// NewMockUsers creates a new mock instance.
func NewMockUsers(ctrl *gomock.Controller) *MockUsers {
	mock := &MockUsers{ctrl: ctrl}
	mock.recorder = &MockUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsers) EXPECT() *MockUsersMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockUsers) Check(ctx context.Context, id primitive.ObjectID) (user.UserReduxData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", ctx, id)
	ret0, _ := ret[0].(user.UserReduxData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Check indicates an expected call of Check.
func (mr *MockUsersMockRecorder) Check(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockUsers)(nil).Check), ctx, id)
}

// CreateSession mocks base method.
func (m *MockUsers) CreateSession(ctx context.Context, arg repository.CreateSessionParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockUsersMockRecorder) CreateSession(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockUsers)(nil).CreateSession), ctx, arg)
}

// Get mocks base method.
func (m *MockUsers) Get(ctx context.Context, arg repository.GetUserParams) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, arg)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockUsersMockRecorder) Get(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsers)(nil).Get), ctx, arg)
}

// GetSession mocks base method.
func (m *MockUsers) GetSession(ctx context.Context, id primitive.ObjectID) (auth.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSession", ctx, id)
	ret0, _ := ret[0].(auth.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSession indicates an expected call of GetSession.
func (mr *MockUsersMockRecorder) GetSession(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSession", reflect.TypeOf((*MockUsers)(nil).GetSession), ctx, id)
}

// MockSettings is a mock of Settings interface.
type MockSettings struct {
	ctrl     *gomock.Controller
	recorder *MockSettingsMockRecorder
}

// MockSettingsMockRecorder is the mock recorder for MockSettings.
type MockSettingsMockRecorder struct {
	mock *MockSettings
}

// NewMockSettings creates a new mock instance.
func NewMockSettings(ctrl *gomock.Controller) *MockSettings {
	mock := &MockSettings{ctrl: ctrl}
	mock.recorder = &MockSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSettings) EXPECT() *MockSettingsMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockSettings) Get(ctx context.Context, service string) (settings.Settings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, service)
	ret0, _ := ret[0].(settings.Settings)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockSettingsMockRecorder) Get(ctx, service interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSettings)(nil).Get), ctx, service)
}

// Save mocks base method.
func (m *MockSettings) Save(ctx context.Context, arg repository.SaveSettingsParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockSettingsMockRecorder) Save(ctx, arg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockSettings)(nil).Save), ctx, arg)
}

// MockFolders is a mock of Folders interface.
type MockFolders struct {
	ctrl     *gomock.Controller
	recorder *MockFoldersMockRecorder
}

// MockFoldersMockRecorder is the mock recorder for MockFolders.
type MockFoldersMockRecorder struct {
	mock *MockFolders
}

// NewMockFolders creates a new mock instance.
func NewMockFolders(ctrl *gomock.Controller) *MockFolders {
	mock := &MockFolders{ctrl: ctrl}
	mock.recorder = &MockFoldersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFolders) EXPECT() *MockFoldersMockRecorder {
	return m.recorder
}

// ChangeChat mocks base method.
func (m *MockFolders) ChangeChat(ctx context.Context, folderID primitive.ObjectID, chat string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeChat", ctx, folderID, chat)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeChat indicates an expected call of ChangeChat.
func (mr *MockFoldersMockRecorder) ChangeChat(ctx, folderID, chat interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeChat", reflect.TypeOf((*MockFolders)(nil).ChangeChat), ctx, folderID, chat)
}

// ChangeGroups mocks base method.
func (m *MockFolders) ChangeGroups(ctx context.Context, folderID primitive.ObjectID, groups []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeGroups", ctx, folderID, groups)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeGroups indicates an expected call of ChangeGroups.
func (mr *MockFoldersMockRecorder) ChangeGroups(ctx, folderID, groups interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeGroups", reflect.TypeOf((*MockFolders)(nil).ChangeGroups), ctx, folderID, groups)
}

// ChangeMessage mocks base method.
func (m *MockFolders) ChangeMessage(ctx context.Context, folderID primitive.ObjectID, message string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeMessage", ctx, folderID, message)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeMessage indicates an expected call of ChangeMessage.
func (mr *MockFoldersMockRecorder) ChangeMessage(ctx, folderID, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeMessage", reflect.TypeOf((*MockFolders)(nil).ChangeMessage), ctx, folderID, message)
}

// ChangeUsernames mocks base method.
func (m *MockFolders) ChangeUsernames(ctx context.Context, folderID primitive.ObjectID, usernames []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUsernames", ctx, folderID, usernames)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUsernames indicates an expected call of ChangeUsernames.
func (mr *MockFoldersMockRecorder) ChangeUsernames(ctx, folderID, usernames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUsernames", reflect.TypeOf((*MockFolders)(nil).ChangeUsernames), ctx, folderID, usernames)
}

// Create mocks base method.
func (m *MockFolders) Create(ctx context.Context, folder domain.Folder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, folder)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFoldersMockRecorder) Create(ctx, folder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFolders)(nil).Create), ctx, folder)
}

// Delete mocks base method.
func (m *MockFolders) Delete(ctx context.Context, folderID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, folderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFoldersMockRecorder) Delete(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFolders)(nil).Delete), ctx, folderID)
}

// GetAccountsByFolderID mocks base method.
func (m *MockFolders) GetAccountsByFolderID(ctx context.Context, folderID primitive.ObjectID) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByFolderID", ctx, folderID)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByFolderID indicates an expected call of GetAccountsByFolderID.
func (mr *MockFoldersMockRecorder) GetAccountsByFolderID(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByFolderID", reflect.TypeOf((*MockFolders)(nil).GetAccountsByFolderID), ctx, folderID)
}

// GetCountAccounts mocks base method.
func (m *MockFolders) GetCountAccounts(ctx context.Context, folderID primitive.ObjectID) (domain.AccountsCount, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCountAccounts", ctx, folderID)
	ret0, _ := ret[0].(domain.AccountsCount)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCountAccounts indicates an expected call of GetCountAccounts.
func (mr *MockFoldersMockRecorder) GetCountAccounts(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCountAccounts", reflect.TypeOf((*MockFolders)(nil).GetCountAccounts), ctx, folderID)
}

// GetFolderById mocks base method.
func (m *MockFolders) GetFolderById(ctx context.Context, folderID primitive.ObjectID) (domain.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderById", ctx, folderID)
	ret0, _ := ret[0].(domain.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolderById indicates an expected call of GetFolderById.
func (mr *MockFoldersMockRecorder) GetFolderById(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderById", reflect.TypeOf((*MockFolders)(nil).GetFolderById), ctx, folderID)
}

// GetFolders mocks base method.
func (m *MockFolders) GetFolders(ctx context.Context) ([]domain.Folder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolders", ctx)
	ret0, _ := ret[0].([]domain.Folder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFolders indicates an expected call of GetFolders.
func (mr *MockFoldersMockRecorder) GetFolders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolders", reflect.TypeOf((*MockFolders)(nil).GetFolders), ctx)
}

// GetFoldersByPath mocks base method.
func (m *MockFolders) GetFoldersByPath(ctx context.Context, path string) ([]domain.FolderItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersByPath", ctx, path)
	ret0, _ := ret[0].([]domain.FolderItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFoldersByPath indicates an expected call of GetFoldersByPath.
func (mr *MockFoldersMockRecorder) GetFoldersByPath(ctx, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersByPath", reflect.TypeOf((*MockFolders)(nil).GetFoldersByPath), ctx, path)
}

// LaunchInviting mocks base method.
func (m *MockFolders) LaunchInviting(ctx context.Context, folderID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInviting", ctx, folderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LaunchInviting indicates an expected call of LaunchInviting.
func (mr *MockFoldersMockRecorder) LaunchInviting(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInviting", reflect.TypeOf((*MockFolders)(nil).LaunchInviting), ctx, folderID)
}

// LaunchMailingGroups mocks base method.
func (m *MockFolders) LaunchMailingGroups(ctx context.Context, folderID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchMailingGroups", ctx, folderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LaunchMailingGroups indicates an expected call of LaunchMailingGroups.
func (mr *MockFoldersMockRecorder) LaunchMailingGroups(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchMailingGroups", reflect.TypeOf((*MockFolders)(nil).LaunchMailingGroups), ctx, folderID)
}

// LaunchMailingUsernames mocks base method.
func (m *MockFolders) LaunchMailingUsernames(ctx context.Context, folderID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchMailingUsernames", ctx, folderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LaunchMailingUsernames indicates an expected call of LaunchMailingUsernames.
func (mr *MockFoldersMockRecorder) LaunchMailingUsernames(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchMailingUsernames", reflect.TypeOf((*MockFolders)(nil).LaunchMailingUsernames), ctx, folderID)
}

// Move mocks base method.
func (m *MockFolders) Move(ctx context.Context, folderID primitive.ObjectID, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Move", ctx, folderID, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move.
func (mr *MockFoldersMockRecorder) Move(ctx, folderID, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockFolders)(nil).Move), ctx, folderID, path)
}

// Rename mocks base method.
func (m *MockFolders) Rename(ctx context.Context, folderID primitive.ObjectID, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", ctx, folderID, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockFoldersMockRecorder) Rename(ctx, folderID, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockFolders)(nil).Rename), ctx, folderID, name)
}

// MockAccounts is a mock of Accounts interface.
type MockAccounts struct {
	ctrl     *gomock.Controller
	recorder *MockAccountsMockRecorder
}

// MockAccountsMockRecorder is the mock recorder for MockAccounts.
type MockAccountsMockRecorder struct {
	mock *MockAccounts
}

// NewMockAccounts creates a new mock instance.
func NewMockAccounts(ctrl *gomock.Controller) *MockAccounts {
	mock := &MockAccounts{ctrl: ctrl}
	mock.recorder = &MockAccountsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccounts) EXPECT() *MockAccountsMockRecorder {
	return m.recorder
}

// ChangeStatusBlock mocks base method.
func (m *MockAccounts) ChangeStatusBlock(ctx context.Context, accountID primitive.ObjectID, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeStatusBlock", ctx, accountID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeStatusBlock indicates an expected call of ChangeStatusBlock.
func (mr *MockAccountsMockRecorder) ChangeStatusBlock(ctx, accountID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeStatusBlock", reflect.TypeOf((*MockAccounts)(nil).ChangeStatusBlock), ctx, accountID, status)
}

// CheckingUniqueness mocks base method.
func (m *MockAccounts) CheckingUniqueness(ctx context.Context, phone string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckingUniqueness", ctx, phone)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckingUniqueness indicates an expected call of CheckingUniqueness.
func (mr *MockAccountsMockRecorder) CheckingUniqueness(ctx, phone interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckingUniqueness", reflect.TypeOf((*MockAccounts)(nil).CheckingUniqueness), ctx, phone)
}

// Create mocks base method.
func (m *MockAccounts) Create(ctx context.Context, accountCreate domain.Account) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, accountCreate)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockAccountsMockRecorder) Create(ctx, accountCreate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAccounts)(nil).Create), ctx, accountCreate)
}

// Delete mocks base method.
func (m *MockAccounts) Delete(ctx context.Context, accountID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, accountID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountsMockRecorder) Delete(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccounts)(nil).Delete), ctx, accountID)
}

// GenerateInterval mocks base method.
func (m *MockAccounts) GenerateInterval(ctx context.Context, folderID primitive.ObjectID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateInterval", ctx, folderID)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateInterval indicates an expected call of GenerateInterval.
func (mr *MockAccountsMockRecorder) GenerateInterval(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateInterval", reflect.TypeOf((*MockAccounts)(nil).GenerateInterval), ctx, folderID)
}

// GetAccountsByFolderID mocks base method.
func (m *MockAccounts) GetAccountsByFolderID(ctx context.Context, folderID primitive.ObjectID) ([]domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountsByFolderID", ctx, folderID)
	ret0, _ := ret[0].([]domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountsByFolderID indicates an expected call of GetAccountsByFolderID.
func (mr *MockAccountsMockRecorder) GetAccountsByFolderID(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountsByFolderID", reflect.TypeOf((*MockAccounts)(nil).GetAccountsByFolderID), ctx, folderID)
}

// GetById mocks base method.
func (m *MockAccounts) GetById(ctx context.Context, accountID primitive.ObjectID) (domain.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", ctx, accountID)
	ret0, _ := ret[0].(domain.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockAccountsMockRecorder) GetById(ctx, accountID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockAccounts)(nil).GetById), ctx, accountID)
}

// GetGroupById mocks base method.
func (m *MockAccounts) GetGroupById(ctx context.Context, folderID primitive.ObjectID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupById", ctx, folderID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGroupById indicates an expected call of GetGroupById.
func (mr *MockAccountsMockRecorder) GetGroupById(ctx, folderID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupById", reflect.TypeOf((*MockAccounts)(nil).GetGroupById), ctx, folderID)
}

// Update mocks base method.
func (m *MockAccounts) Update(ctx context.Context, account domain.AccountUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountsMockRecorder) Update(ctx, account interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccounts)(nil).Update), ctx, account)
}
